name: Rust
on:
  push:
    # branches: ["main"]
  pull_request:
    # branches: ["main"]

permissions:
  contents: read
  actions: read
  checks: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  build-and-test:
    name: Build and Test Rust crates
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # https://github.com/actions-rust-lang/setup-rust-toolchain/blob/main/rust.json
      - name: Install Rust Problem Matcher
        if: matrix.os == 'ubuntu-latest'
        run: echo "::add-matcher::.github/rust.json"

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/**/Cargo.lock') }}

      - name: Install cargo-llvm-cov
        run: cargo +stable install cargo-llvm-cov --locked

      - name: Install cargo2junit
        run: cargo install cargo2junit

      - name: Bump opt-level
        if: matrix.os == 'ubuntu-latest'
        working-directory: rust
        run: sed -i '/\[profile.dev]/a opt-level=1' Cargo.toml

      - name: Compile (tests)
        working-directory: rust
        run: cargo test --no-run --locked

        # It's faster to `test` before `build` ¯\_(ツ)_/¯
      - name: Compile (pdf-analyzer)
        working-directory: rust
        run: cargo build --quiet

      - name: Run tests and convert to JUnit format (Unix)
        if: runner.os != 'Windows'
        working-directory: rust
        run: RUSTC_BOOTSTRAP=1 cargo test -- -Z unstable-options --format=json --report-time --quiet | tee test-results.json

      - name: Run tests and convert to JUnit format (Windows)
        if: runner.os == 'Windows'
        working-directory: rust
        run: |
          $env:RUSTC_BOOTSTRAP=1
          cargo test -- -Z unstable-options --format=json --report-time --quiet | tee test-results.json

      - name: Convert test output to JUnit format
        working-directory: rust
        run: cat test-results.json | cargo2junit > test-results.xml

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: Tests report ${{ matrix.os }} # Name of the check run which will be created
          path: rust/test-results.xml # Path to test results
          reporter: java-junit # Format of test results

      - name: Generate coverage report
        working-directory: rust
        if: success() || failure() # run this step even if previous step failed
        run: cargo llvm-cov --lcov --output-path coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success() || failure() # run this step even if previous step failed
        with:
          files: rust/coverage.lcov
          flags: unittests
          name: codecov-coverage
          fail_ci_if_error: true
